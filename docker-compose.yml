version: '3.8'
services:
  prometheus:
    container_name: prometheus
    image: prom/prometheus:latest
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - 9099:9090
    networks:
      - frontend-network
      - backend-network
    depends_on:
      - cadvisor
      - node-exporter

  node-exporter:
    container_name: node-exporter
    image: prom/node-exporter
    ports:
      - "9100:9100"
    networks:
      - frontend-network
      - backend-network

  cadvisor:
    image: google/cadvisor:latest
    container_name: cadvisor
    ports:
      - 9559:8080
    restart: always
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    networks:
      - frontend-network
      - backend-network

  grafana:
    container_name: grafana
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    volumes:
      - ./grafana/datasource.yml:/etc/grafana/provisioning/datasources/datasource.yml
    environment:
     #- GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_SECURITY_ADMIN_PASSWORD=pass123#
    networks:
      - frontend-network
      - backend-network
    depends_on:
      - prometheus

  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    ports:
      - "88:80"
    depends_on:
      - frontend
    networks:
      - frontend-network
    restart: always

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        VUE_APP_BACKEND_API: http://192.168.0.14:8000  
    image: frontend:latest
    ports:
      - "10001-10003:8080"
    networks:
      - frontend-network
    restart: always
    deploy:
      replicas: 3
      mode: replicated
    depends_on:
      - haproxy

  haproxy:
    build: 
      context: ./haproxy
      dockerfile: Dockerfile
    # image:
    #   leebolim0701471/haproxy:6.0
    privileged: true
    ports:
      - "8000:80"
      - "9001:9000"
    depends_on:
      - backend
    networks:
      - frontend-network
      - backend-network
    restart: always

  backend:
    # ports:
    #     - "8001-8003:8000"
    environment:
      PORT: 8000
      GUESTBOOK_DB_ADDR: mongodb:27017
    networks:
      - backend-network
    # image:
    #   leebolim0701471/agora-backend:3.0
    build:
      context: ./backend
      dockerfile: Dockerfile
    # image 최종본 만들어지면 그 때 주석 풀고 build 없애기~
    deploy:
      replicas: 3
      mode: replicated
    depends_on:
      - mongodb
    restart: always
  mongodb:
    ports:
      - "17017:27017"
    image:
      mongo:4
    networks:
      - backend-network
    restart: always

networks:
  frontend-network: 
    ipam:
        driver: default
        config:
          - subnet: 172.28.0.0/16
  backend-network:
    ipam:
        driver: default
        config:
          - subnet: 172.29.0.0/16